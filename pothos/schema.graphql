"""Create encounter input"""
input CreateEncounterInput {
  location: String!
  nickname: String!
  pokemonId: Int!
  status: STATUS!
}

"""Create nuzlocke input"""
input CreateNuzlockeInput {
  description: String
  gameId: Int!
  title: String!
  type: NuzlockeType!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Encounter {
  createdAt: Date!
  id: ID!
  location: String!
  nickname: String!
  nuzlocke: Nuzlocke!
  pokemon: Pokemon!
  status: STATUS!
  updatedAt: Date!
}

input EncounterFilter {
  location: StringFilter
  nickname: StringFilter
  pokemon: PokemonFilter
}

"""Search query input"""
input EncounterSearchInput {
  cursor: String
  filter: EncounterFilter
  order: SearchOrder
  orderBy: String
}

"""Paginated list of Encounters"""
type EncountersResponse {
  nextCursor: String
  prevCursor: String
  results: [Encounter!]!
  totalCount: Int
}

type Game {
  generation: String!
  id: ID!
  name: String!
  regions: [String!]!
  versionGroup: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """Create a encounter"""
  createEncounter(input: CreateEncounterInput!, nuzlockeId: String!): Encounter!

  """Create a nuzlocke"""
  createNuzlocke(input: CreateNuzlockeInput!): Nuzlocke!

  """Delete encounter"""
  deleteEncounter(id: String!): Encounter!

  """Delete nuzlockes"""
  deleteNuzlockes(ids: [String!]!): [String!]!
  signUp(avatar: String!, email: String!, username: String!): User!

  """Update encounter"""
  updateEncounter(id: String!, input: UpdateEncounterInput!): Encounter!

  """Update nuzlocke"""
  updateNuzlocke(id: String!, input: CreateNuzlockeInput!): Nuzlocke!
}

type Nuzlocke {
  createdAt: Date!
  description: String
  encounters: [Encounter!]!
  game: Game!
  id: ID!
  title: String!
  type: NuzlockeType!
  updatedAt: Date!
  user: User!
}

"""Paginated list of nuzlockes"""
type NuzlockeResponse {
  nextCursor: String
  prevCursor: String
  results: [Nuzlocke!]!
  totalCount: Int
}

"""Nuzlocke type"""
enum NuzlockeType {
  CAGELOCKE
  CUSTOM
  NORMAL
  SOUL_LINK
}

type Pokemon {
  abilities: [String!]!
  baseAttack: Int!
  baseDefense: Int!
  baseHp: Int!
  baseSpAttack: Int!
  baseSpDefense: Int!
  baseSpeed: Int!
  height: Int!
  id: ID!
  name: String!
  sprite: String!
  types: [String!]!
  weight: Int!
}

input PokemonFilter {
  name: StringFilter
}

type Query {
  """Get encounter by id"""
  getEncounter(id: String!): Encounter!
  getNuzlocke(id: String!): Nuzlocke!

  """Get a list of encounters from a nuzlocke"""
  getNuzlockeEncounters(input: EncounterSearchInput, nuzlockeId: String!): EncountersResponse!
  getUser(userId: String!): User!

  """Search for nuzlockes"""
  searchNuzlockes(input: SearchInput): NuzlockeResponse!
}

"""Pokemon status"""
enum STATUS {
  FAINTED
  IN_PC
  IN_TEAM
  SEEN
}

"""Search query input"""
input SearchInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Search order"""
enum SearchOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  equals: String
  not: StringFilter
  startsWith: String
}

"""Update encounter input"""
input UpdateEncounterInput {
  location: String
  nickname: String
  pokemonId: Int
  status: STATUS
}

type User {
  avatar: String
  email: String
  id: ID!
  name: String
  nuzlockes: [Nuzlocke!]!
}
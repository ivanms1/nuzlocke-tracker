"""Create nuzlocke input"""
input CreateNuzlockeInput {
  description: String
  gameId: Int!
  title: String!
  type: Role!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """Create a nuzlocke"""
  createNuzlocke(input: CreateNuzlockeInput!, userId: String!): Nuzlocke!

  """Delete nuzlockes"""
  deleteNuzlockes(ids: [String!]!): [String!]!
  signUp(avatar: String!, email: String!, username: String!): User!

  """Update nuzlocke"""
  updateNuzlocke(id: String!, input: CreateNuzlockeInput!): Nuzlocke!
}

type Nuzlocke {
  createdAt: Date!
  description: String
  id: ID!
  pokemons: [NuzlockePokemon!]!
  title: String!
  type: Role!
  updatedAt: Date!
  user: User!
}

type NuzlockePokemon {
  createdAt: Date!
  id: ID!
  locationId: Int!
  nickname: String!
  nuzlocke: Nuzlocke!
  pokemonId: Int!
  status: STATUS!
  types: [Int!]!
  updatedAt: Date!
}

"""Paginated list of articles"""
type NuzlockeResponse {
  nextCursor: String
  prevCursor: String
  results: [Nuzlocke!]!
  totalCount: Int
}

type Query {
  getNuzlocke(id: String!): Nuzlocke!

  """Get a nuzlocke pokemon by id"""
  getNuzlockePokemon(id: String!): NuzlockePokemon!

  """Get a list of pokemons from a nuzlocke"""
  getNuzlockePokemons(nuzlockeId: String!): [NuzlockePokemon!]!
  getUser(userId: String!): User!

  """Search for nuzlockes"""
  searchNuzlockes(input: SearchInput): NuzlockeResponse!
}

"""Nuzlocke type"""
enum Role {
  CAGELOCKE
  CUSTOM
  NORMAL
  SOUL_LINK
}

"""Pokemon status"""
enum STATUS {
  DEAD
  ENCOUNTERED
  IN_PC
  IN_TEAM
}

"""Search query input"""
input SearchInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Search order"""
enum SearchOrder {
  asc
  desc
}

type User {
  avatar: String
  email: String
  id: ID!
  name: String
  nuzlockes: [Nuzlocke!]!
}
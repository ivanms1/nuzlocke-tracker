datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  prismaUtils  = true
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  nuzlockes     Nuzlocke[]
  avatar        String?
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum NuzlockeType {
  NORMAL
  CAGELOCKE
  SOUL_LINK
  CUSTOM
}

model Nuzlocke {
  id          String       @id @default(cuid())
  type        NuzlockeType
  gameId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  encounters  Encounter[]
  game        Game         @relation(fields: [gameId], references: [id])
}

enum STATUS {
  SEEN
  IN_TEAM
  IN_PC
  FAINTED
}

model Encounter {
  id         String   @id @default(cuid())
  nickname   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pokemonId  Int
  status     STATUS
  nuzlocke   Nuzlocke @relation(fields: [nuzlockeId], references: [id])
  nuzlockeId String
  location   String
  pokemon    Pokemon  @relation(fields: [pokemonId], references: [id])
}

model Pokemon {
  id            Int         @id
  name          String
  types         String[]
  abilities     String[]
  sprite        String
  baseAttack    Int
  baseDefense   Int
  baseSpAttack  Int
  baseSpDefense Int
  baseSpeed     Int
  baseHP        Int
  weight        Float
  height        Float
  encounters    Encounter[]
}

model Game {
  id         Int      @id
  name       String
  generation String
  versionGroup String
  regions    String[]
  Nuzlocke Nuzlocke[]
}
